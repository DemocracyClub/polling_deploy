---
- hosts: servers
  vars_files:
    - vars.yml
  gather_facts: true
  become: true

  tasks:
  # When building an AMI make sure that we update to the latest of all packages
  # installed in the base image
  - name: Update all packages
    apt: upgrade=safe
    when: packer is defined

  - name: Generate locales
    shell: locale-gen "en_GB.UTF-8"

  - name: Reconfigure locales
    shell: dpkg-reconfigure locales

  - name: Create the project directory.
    file: state=directory path={{ project_root }}

  - name: Create user.
    user: home={{ project_root }}/home/ name={{ project_name }} state=present

  - name: Update the project directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}

  - name: Create the code directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/

  - name: Install required system packages.
    apt: pkg={{ item }} state=installed update-cache=yes
    with_items: "{{ system_packages }}"

  - name: Install required Python packages.
    easy_install: name={{ item }}
    with_items: "{{ python_packages }}"

  - name: Change permissions.
    shell: chown -R {{ project_name }}:{{ project_name }} {{ project_root }}

  - name: Install nginx configuration file.
    template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
    notify: restart nginx

  - name: Remove default nginx vhost
    file: name=/etc/nginx/sites-enabled/default state=absent

  - name: Optimize Postgres for DB import
    template: src=files/conf/pg_write_heavy.conf dest=/etc/postgresql/9.3/main/postgresql.conf
    when: packer is defined

  - name: Optimize Postgres for reads
    template: src=files/conf/pg_read_heavy.conf dest=/etc/postgresql/9.3/main/postgresql.conf
    when: not packer

  - name: Install postgres_hba configuration file.
    template: src=files/conf/pg_hba.conf dest=/etc/postgresql/9.3/main/pg_hba.conf

  - name: restart postgres
    service: name=postgresql state=restarted

  - name: Install init scripts.
    template: src=files/init/{{ item }}.conf dest=/etc/init/{{ project_name }}_{{ item }}.conf
    with_items: "{{ initfiles }}"

  - name: Create user.
    postgresql_user:
      name: "{{project_name}}"
      role_attr_flags: "CREATEDB,SUPERUSER"

  - name: Create database.
    postgresql_db:
      name: "{{project_name}}"

  - name: Install rsyslog configuration files
    template: src={{item.src}} dest={{item.dst}}
    with_items:
      - { 'src': 'files/conf/rsyslog/rsyslog.conf', 'dst': '/etc/rsyslog.conf' }
      - { 'src': 'files/conf/rsyslog/nginx.conf', 'dst': '/etc/rsyslog.d/nginx.conf' }
    notify:
      - restart rsyslog

  handlers:
    - include: handlers.yml

- include: deploy.yml
  tags: [deploy]

- include: addressbase.yml
  when: packer_addressbase is defined

- include: import_data.yml
  when: packer_import_data is defined

- hosts: servers
  vars_files:
    - vars.yml
  gather_facts: true
  become: true

  tasks:
  - name: Restart services.
    service: name={{ project_name }}_{{ item }} state=restarted
    with_items: "{{ initfiles }}"
