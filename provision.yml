---
- hosts: all
  # gather facts needs to be off until we've run pre_tasks
  # because gather_facts requires python
  gather_facts: false
  vars_files:
    - vars.yml

  pre_tasks:
    - name: Stop auto update
      raw: systemctl disable apt-daily.timer

    - name: Remove all partial apt files
      raw: rm -rf /var/lib/apt/lists/partial/*

    # turn gather_facts back on
    # so that ansible_env is defined
    - name: gather facts
      setup: filter=ansible_*

    - name: Set non-rest_mode vars
      set_fact:
        gunicord_workers: "{{ ansible_facts['processor_cores']*2+1 }}"
      when: not rest_mode|bool


  become: true
  roles:
#     - role: install_initial
    - role: dc_commonscripts
    - role: postgresql
#     - role: every_election

  handlers:
    - import_tasks: handlers.yml

  tasks:

  # When building an AMI make sure that we update to the latest of all packages
  # installed in the base image

  - name: Create apt-daily.timer.d directory
    file: path=/etc/systemd/system/apt-daily.timer.d state=directory

  - name: Install apt-daily timer config file
    template:
      src: "files/systemd/apt-daily.timer.conf"
      dest: "/etc/systemd/system/apt-daily.timer.d/apt-daily.timer.conf"

  - name: Start auto update again
    raw: systemctl start apt-daily.timer

  - name: Update all packages
    apt: upgrade=safe
    when: packer is defined

  - name: Generate locales
    shell: locale-gen "en_GB.UTF-8"

  - name: Reconfigure locales
    shell: DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales

  - name: Create the project directory.
    file: state=directory path={{ project_root }}

  - name: Create user.
    user:
      home: "{{ project_root }}/home"
      name: "{{ project_name }}"
      shell: "/bin/bash"
      state: present

  - name: Update the project directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}

  - name: Create the code directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/

  - name: Install required system packages.
    apt:
      name: "{{ system_packages }}"
      state: present
      update_cache: yes

  - name: Upgrade NPM
    npm:
      name: npm
      global: true
      version: "6.14.11"
      state: latest

  - name: Install required Python 3 packages.
    pip:
      name: "{{ python3_packages }}"
      executable: pip3


  - name: Install CodeDeploy agent
    raw: cd /home/ubuntu && sudo wget https://aws-codedeploy-eu-west-2.s3.eu-west-2.amazonaws.com/latest/install && sudo chmod +x ./install && sudo ./install auto

  - name: Change permissions.
    shell: chown -R {{ project_name }}:{{ project_name }} {{ project_root }}

  - name: Install nginx configuration file.
    template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
    notify: restart nginx

  - name: Remove default nginx vhost
    file: name=/etc/nginx/sites-enabled/default state=absent

  - name: Install systemd init scripts.
    template:
      src: "files/systemd/{{ item }}.service"
      dest: "/etc/systemd/system/{{ project_name }}_{{ item }}.service"
    with_items: "{{ servicefiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: Create the db_replication service log directory
    file:
      path: /var/log/db_replication/
      state: directory
      mode: 0777

  - name: Create the db_replication service log file
    file:
      path: /var/log/db_replication/logs.log
      state: touch
      mode: 0777

  - name: Install systemd socket scripts.
    template:
      src: "files/systemd/{{ item }}.socket"
      dest: "/etc/systemd/system/{{ project_name }}_gunicorn.socket"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: systemd gunicorn tmpfiles.d
    template:
      src: "files/systemd/{{ item }}.tmpfiles"
      dest: "/etc/tmpfiles.d/{{ project_name }}_gunicorn.conf"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: Install bash scripts
    template:
      src: "files/scripts/{{ item }}.sh"
      dest: "{{ project_root }}/{{ item }}.sh"
      mode: "u+rwx"
      owner: "{{ project_name }}"
    with_items: "{{ bash_scripts }}"

  - name: Set up handy bashrc file
    lineinfile:
      dest: "{{ project_root }}/home/.bashrc"
      line: 'cd && cd ../code && source ../env/bin/activate'

  - name: Set server dirty file
    file:
      path: "{{ project_root }}/home/server_dirty"
      state: touch
      mode: "u=rw,g=r,o=r"
      owner: "{{ project_name }}"

  - name: Run import councils from EC hourly
    cron:
      name: "Import councils from EC hourly"
      job: "/usr/bin/manage-py-command import_councils --only-contact-details"
      minute: "1"
      user: "{{ project_name }}"

  - name: Run import councils on the logger DB hourly
    cron:
      name: "Run import councils on the logger DB hourly"
      job: "/usr/bin/manage-py-command import_councils --only-contact-details --database logger"
      minute: "1"
      user: "{{ project_name }}"


- import_playbook: deploy.yml
  tags: [deploy]


