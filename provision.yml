---
- hosts: servers
  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal aptitude)
      register: output
      changed_when: 'output.stdout != ""'
  vars_files:
    - vars.yml
  # gather facts needs to be off until we've run pre_tasks
  # because gather_facts requires python
  gather_facts: false
  become: true
  roles:
    - postgresql
    - every_election

  tasks:

  # turn gather_facts back on
  # so that ansible_env is defined
  - name: gather facts
    setup:

  # When building an AMI make sure that we update to the latest of all packages
  # installed in the base image

  - name: Create apt-daily.timer.d directory
    file: path=/etc/systemd/system/apt-daily.timer.d state=directory

  - name: Prevent systemd daily update race condition
    template:
      src: "files/systemd/apt-daily.timer.conf"
      dest: "/etc/systemd/system/apt-daily.timer.d/apt-daily.timer.conf"

  - name: Update all packages
    apt: upgrade=safe
    when: packer is defined

  - name: Generate locales
    shell: locale-gen "en_GB.UTF-8"

  - name: Reconfigure locales
    shell: DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales

  - name: Create the project directory.
    file: state=directory path={{ project_root }}

  - name: Create user.
    user: home={{ project_root }}/home/ name={{ project_name }} state=present

  - name: Update the project directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}

  - name: Create the code directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/

  - name: Install required system packages.
    apt: pkg={{ item }} state=installed update-cache=yes
    with_items: "{{ system_packages }}"

  - name: symlink /usr/bin/node to /usr/bin/nodejs
    file: src=/usr/bin/nodejs dest=/usr/bin/node state=link

  - name: Install required Python packages.
    easy_install: name={{ item }}
    with_items: "{{ python_packages }}"

  - name: Change permissions.
    shell: chown -R {{ project_name }}:{{ project_name }} {{ project_root }}

  - name: Install nginx configuration file.
    template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
    notify: restart nginx

  - name: Remove default nginx vhost
    file: name=/etc/nginx/sites-enabled/default state=absent

  - name: Install systemd init scripts.
    template:
      src: "files/systemd/{{ item }}.service"
      dest: "/etc/systemd/system/{{ project_name }}_{{ item }}.service"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: Install systemd socket scripts.
    template:
      src: "files/systemd/{{ item }}.socket"
      dest: "/etc/systemd/system/{{ project_name }}_gunicorn.socket"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: systemd gunicorn tmpfiles.d
    template:
      src: "files/systemd/{{ item }}.tmpfiles"
      dest: "/etc/tmpfiles.d/{{ project_name }}_gunicorn.conf"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: "enable gunicorn"
    shell: "systemctl enable {{ project_name }}_gunicorn.socket"

  - name: "start gunicorn"
    shell: "systemctl start {{ project_name }}_gunicorn.socket"
    notify:
      - restart web frontend
      - restart nginx

  - name: Install rsyslog configuration files
    template: src={{item.src}} dest={{item.dst}}
    with_items:
      - { 'src': 'files/conf/rsyslog/rsyslog.conf', 'dst': '/etc/rsyslog.conf' }
      - { 'src': 'files/conf/rsyslog/nginx.conf', 'dst': '/etc/rsyslog.d/nginx.conf' }
    notify:
      - restart rsyslog

  - name: Check if Libdrafter installed
    command: test -e /usr/lib/libdrafter.so
    register: libdrafter_installed
    ignore_errors: True

  handlers:
    - include: handlers.yml
      static: yes

- include: drafter.yml
  when: libdrafter_installed|failed

- include: deploy.yml
  tags: [deploy]

- include: addressbase.yml
  when: packer_addressbase is defined

- include: import_data.yml
  when: packer_import_data is defined

- hosts: servers
  vars_files:
    - vars.yml
  gather_facts: true
  become: true
